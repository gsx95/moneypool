AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  moneypool

Globals:
  Function:
    Timeout: 10

Parameters:
  WebsiteCertificateArn:
    Type: String
    Description: Certificate for your website that must be issued in us-east-1
  RuleSetName:
    Type: String
    Description: Name of SES ReceiptRuleSet to put the receipt rule in.
  ReceiveNotificationsMailAddress:
    Type: String
    Description: Email address that you want to receive your paypal notifications with. Needs to have a corresponding verified domain in AWS SES.
  Domain:
    Type: String
    Description: Domain to deploy your frontend to. Needs to have a corresponding hosted zone in route53.
  HostedZoneName:
    Type: String
    Description: Name of your hosted zone for both website domain and api domain.
  EmailExpectedSubject:
    Type: String
    Description: Expected Subject of notification mail. All mails with different subjects are ignored.
    Default: "Sie haben eine Zahlung erhalten"
  EmailNameAmountRegex:
    Type: String
    Description: Regex to match the name of the sender and the amount sent in named the matching groups 'name' and 'amount'.  E.g. if the mail contains the text '[Name] has sent [amount] to you', then this probably should be '(?P<name>(.+)) has sent (?P<amount>(.+)) to you'. Has to work on golang's regex engine.
    Default: "(?P<name>(.+)) hat Ihnen (?P<amount>(.+)) gesendet"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Website
        Parameters:
          - Domain
          - WebsiteCertificateArn
          - HostedZoneName
      - Label:
          default: Email Receiving
        Parameters:
          - RuleSetName
          - ReceiveNotificationsMailAddress
      - Label:
          default: Email Parsing
        Parameters:
          - EmailExpectedSubject
          - EmailNameAmountRegex
    ParameterLabels:
      WebsiteCertificateArn:
        default: Website Certificate Arn
      HostedZoneName:
        default: HostedZoneName
      RuleSetName:
        default: Ruleset Name
      ReceiveNotificationsMailAddress:
        default: Mail address to receive notifications from
      EmailExpectedSubject:
        default: Expected subject in notification mail
      EmailNameAmountRegex:
        default: Name-amount-regex in mail parsing

Resources:
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join [ ".", [ 'api', !Ref Domain ] ]
      ValidationMethod: DNS

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: !Sub ["'https://${Domain}'", {Domain: !Ref Domain}]
        AllowCredentials: "'*'"
      Auth:
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: MoneyPool API Usage Plan
          UsagePlanName: MoneyPoolPlan
          Quota:
            Limit: 10000
            Period: DAY
          Throttle:
            BurstLimit: 30
            RateLimit: 30
      EndpointConfiguration: REGIONAL
      Domain:
        DomainName: !Join [ ".", [ 'api', !Ref Domain ] ]
        CertificateArn: !Ref APICertificate
        Route53:
          HostedZoneName: !Ref HostedZoneName

  HandlePaymentNotification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/transaction
      Handler: transaction
      Runtime: go1.x
      Tracing: Active
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:GetObject'
          Resource: "*"
        - Effect: Allow
          Action:
          - 'dynamodb:*'
          Resource: "*"
      Environment:
        Variables:
          MoneyPoolsTableName: "MoneyPoolsTable"
          EmailBucketName: !Ref S3BucketMails
          EmailExpectedSubject: !Ref EmailExpectedSubject
          NameAmountRegex: !Ref EmailNameAmountRegex

  GetMoneypoolDetails:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/api
      Handler: api
      Runtime: go1.x
      Tracing: Active
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:*'
          Resource: "*"
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /getDetails/{moneyPool}
            RestApiId: !Ref API
            Method: GET
            Auth:
              ApiKeyRequired: true
      Environment:
        Variables:
          MoneyPoolsTableName: MoneyPoolsTable
          TransactionsTableName: TransactionsTable
          CorsDomain: !Ref Domain

  MoneyPoolsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: MoneyPoolsTable
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Moneypool frontend OA'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for moneypool frontend"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        Aliases:
          - !Ref Domain
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  WebsiteAliasRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
        - Name: !Ref Domain
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Hosted Zone of cloudfront
            DNSName: !GetAtt
              - CloudfrontDistribution
              - DomainName

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref Domain

  S3BucketMails:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [ !Ref Domain, 'receive-mails' ] ]

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  S3MailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketMails
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: "s3:PutObject"
            Resource:
              - !Sub "arn:aws:s3:::${S3BucketMails}/*"
            Principal:
              Service: "ses.amazonaws.com"
            Condition:
              StringEquals:
                "aws:Referer": !Sub "${AWS::AccountId}"

  ReceiveMailRule:
    Type: AWS::SES::ReceiptRule
    DependsOn: S3MailBucketPolicy
    Properties:
      RuleSetName: !Ref RuleSetName
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref S3BucketMails
          - LambdaAction:
              FunctionArn: !GetAtt HandlePaymentNotification.Arn
        Enabled: true
        Name: !Sub ["${Domain}-receive-payment-notification", {Domain: !Ref Domain}]
        Recipients:
          - !Ref ReceiveNotificationsMailAddress

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "ses.amazonaws.com"
      SourceAccount: !Sub ${AWS::AccountId}
      FunctionName: !GetAtt HandlePaymentNotification.Arn